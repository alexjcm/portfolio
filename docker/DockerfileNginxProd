## 1. Builder Stage
FROM node:22-alpine as builder
# set it as the working directory so that we don't need to keep referencing it
WORKDIR /app
#COPY package*.json /app
COPY package.json package.json
RUN npm install

# make sure to set up .dockerignore to copy only necessary files
# Copy project files from the current directory to the working directory inside the container
#COPY . /app
COPY . .
# Use the corresponding env file for each environment.
COPY .env.production .env.production
# Build the application for production
RUN npm run build


# 2. bundle static assets with nginx. Runner Stage
# Uses a lighter base image to deploy the application
FROM nginx:alpine
#ENV NODE_ENV production

# remove existing files from nginx directory
RUN rm -rf /usr/share/nginx/html/*
# For Next.js.- Copy built assets from 'builder' stage
COPY --from=builder /app/out /usr/share/nginx/html
COPY --from=builder /app/.next /usr/share/nginx/html
# For React.js only.- Copy the React application build files from the above image to the Nginx working directory
#COPY --from=builder /app/build /usr/share/nginx/html

# add nginx config
RUN rm /etc/nginx/conf.d/default.conf
COPY --from=builder /app/docker/nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80

# Starts Nginx in the foreground when the container starts up
CMD ["nginx", "-g", "daemon off;"]